문자열 : 여러 문자를 하나로 묶은 것

String Class 문자열은 기본 자료형에 속하지 않는다.

참조 자료형



표준 입력

Scanner Class

Scanner sc = new Scanner(System.in);
						운영체제에서 입력을 받는 것
버퍼를 쓰지 않는다면 글자 하나당 입력이 들어가서 ㄱ, ㅣ 하나씩 쓰여지게 된다.
하지만 버퍼라는 공간에 키보드의 입력이 모두 버퍼에 입력이 되고 enter를 쓰게되면 그때 입력이 완료된다.

하지만 next() 같은경우에는 스페이스바를 버퍼의 중간지점으로 끊겠다는 토큰으로 사용이 된다.
그렇지만 입력이 버퍼에 저장이 되지않는 것은 아니기 때문에 띄어쓰기 하기전 까지 입력이 된 후에
next()가 한번 더 나올 경우 띄어쓰기 이후 써주었던 것 들이 입력된다.
하지만 nextLine()이 나올 경우에 남아있던 enter가 먹히기 때문에 
남아있는 버퍼를 비우기 위해 nextLine()으로 비워 준후 사용한다.

Scanner의 메서드()



next() 와 nextLine()

java.lang에 들어있는 것들은 import가 필요하지 않다.

하지만 Scanner는 util에 있기에 import를 해주어야하고

일괄적으로 import하는
이클립스 단축키는 ctrl + shift + o 이다.

단! 그 클래스를 쓰겠다고 명확하게 변수를 지정해주어야 쓸 수 있다.


next() 와 nextLine() 의 차이

nextLine()의 경우 띄어쓰기를 쓸 수 있고 줄 바꿈을 통해 라인 관리를 한다.
그에반해 next()는 띄어쓰기를 허용 하지 않는다.

만약 next()를 쓰고 띄어쓰기를 쓴 후 그 다음의 인풋이 없다면 오류가 일어난다



버퍼를 쓰는 이유:
한공간을 만들어서 축적을 해놓고 단위 별로 나누어서 송출하거나 보내주는 것
그렇기 때문에 실시간 스트리밍등 에서 인터넷이 끊기거나 느려져도 버퍼를 통해
실시간 스트리밍이 깔끔히 가능하다.


제어 문 (제어흐름)

조건문
if : 만약 ~ 라면 (조건은 if에만 달린다) 조건절 뒤에는 명령절이 온다

else: 그 조건이 아니면~
else와 if는 하나의 명령만 실행할 수 있고 여러가지의 명령을 주기 위해서는
범위를 지정해주어야한다. {}를 통해서
뒤에 if나 else가 올 수 있다.

switch  : 해당 조건에 맞는 case를 찾는 문법
case

default > else와 같은 역할








반복문

for : 선언 방식

for (int i = 0; <- i변수에 대한 선언과 초기화(1번) i < 1000; <- 조건식(2번) i++ 탈출조건을 위한 변화수식(4번)){
	System.out.println(i);(3번)
}


1 번은 컴퓨터는 항상 0부터 시작 조건식은 반복의 횟수 () 안에 있는 식은 항상 고정이다.
몇번의 반복을 하는 반복문인지를 생각한다.


증감 후에는 조건식에 가서 조건확인후 실행문 다시 증감식 다시 조건식 방식으로 간다.
조건의 false가 될 때까지 반복된다.


전역 변수와 지역 변수

지역변수라는 기준에 따라서 전역 변수가 결정이 된다.

지역변수의 기준은 {}이다.

for문은 index 순서가 있는 경우



while

순서보다 조건이 중요할 때 쓰인다.



























