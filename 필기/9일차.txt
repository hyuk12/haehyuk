Object 클래스

따로 생성해서 쓸 수 있지만 그럴 일은 우리가 없다.

toString 특징
모든 Object 클래스는 생성할 당시에 toString을 들고 있다. 
그래서 출력을 하게되면 obj객체와 str에 넣은 toString값은 그래서 같다.
그렇다고해서 obj 객체를 String에 대입할 수는 없다.


public Student(String name, int age) {
        super(); // -> 우리는 상속을 받은 적이 없지만  최상위 클래스인 Object 는 모든 클래스가 생성이 될 때 상속이 된 채로 생성이 된다.
        // extends Object 가 생략이 되어 있는 것이다.
        this.name = name;
        this.age = age;
    }

우리가 배운 개념으로는 다중 상속은 불가하다.
여기서 Object 의 상속의 개념은 모든 클래스가 만들어 질 때 오브젝트 클래스가 만들어 진다는 걸 감안한다면

만약 A라는 클래스를 B 와 C가 상속을 받는다고 하였을 때 A라는 클래스에는 오브젝트 클래스가 상속이되는 개념이라 B와 C는 오브젝트 클래스를 상속 받는다.
상위의 상위의 개념으로 최상위 클래스기에 가능하다.


hashCode로 비교하는 경우는 객체가 다르더라도 값만 같으면 true를 반환하고 싶을 때 쓰인다

hash값으로 객체의 안에 있는 값을 변경해서 보내주기에 값이같으면 같다 항상

getClass()

Class.class 는 클래스들의 정보가 담겨있다.
주소값, 패키지명, 클래스명, 가지고있는 메소드들 등

타입을 확인할 때 getClass()를 이용한다 그리고 클래스이름을 가지고 오거나 변수, 메소드등을 확인할 때 쓰인다

obj.getClass() == Object.class
