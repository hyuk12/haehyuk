산대특 2일차 TIL

변수 : 데이터를 담을 수 있는 공간 ( 각각의 데이터에 따라 사이즈 즉 크기가 다를 수 있다) 사이즈 크기에 따라 담을 수 있는 데이터가 달라진다.
각각의 공간에는 담을 수 있는 데이터의 종류가 다르게 설정 되어 있고 맞지 않는 데이터는 담을 수가 없다.
	자료형: 데이터를 지정해서 담는 용도 
	  + 
	변수명: 데이터 공간의 이름


변수명의 제약 사항
1. 변수 이름은 영문자나 숫자를 사용할 수 있으며, 구분하고, 특수문자 중에서는 $, _ 만 사용할 수 있다.
2. 변수 이름은 숫자로 시작할 수 없다.
3. 이미 자바에서 쓰고 있는 예약어는 사용할 수 없다. 

ex) 자료형 g_Level;

	안되는 것 
	자료형 41age;(숫자가 앞에 오면 안된다)

	(이미 자바에서 정해져 있는 예약어)
	자료형 while;
	자료형 for;

변수의 표기법(무조건 소문자로 시작한다)
카멜 표기법

	myName
	(이어 지는 단어의 시작문자를 대문자로 써서 구분하는 방법)

헝가리안 표기법

	(스네이크 표기법)

	my_name

자료형과 변수의

선언과 초기화

선언 : int level;

초기화: level = 10;

비트와 바이트

1.  비트
	0 또는 1의 값을 저장하기 위한 최소 단위
	1bit 가 가지는 총 경우의 수는 0과 1 두 가지이다.

2. 바이트

자바 자료형의 종류

논리형	boolean	1bit		false	true 또는 false(0 또는 1)

문자형	char	 	2byte	\u0000	0~65,535

정수형	byte	 	1byte	0		-128~ 127
		short	2byte 	0 		-32768~ 32767
		int(기본) 		4byte	0		-2147483648 ~ 2147483647
		long 	8byte 	0 		-9223372036854775808 ~ 9223372036854775807

실수형	float 	4byte 	0.0		-3.4E38 ~ +3.4E38
		double(기본)	8byte	0.0		-1.7E308 ~ +1.7E308

상수와 리터럴

상수 : 항상 변하지 않는 값 

상수는 자료형 앞에 final 이 붙는다

상수는 초기화가 이루어진 후에 새로 초기화해서 사용할 수 없다.

상수는 선언을 하였으면 무조건 초기화를 해야한다.
상수는 상수명을 무조건 대문자로 표기한다.

리터럴

기본적으로 우리는 컴퓨터의 안에 데이터를 볼 수가 없고

예를 들어 100을 선언한다고 하였을 때 

int num = 100; 을 선언 할 수 있으나
int 100 = 00101010....;

100이라는 것은 컴퓨터의 데이터로는 이진법으로 01010100 이런식으로 나타낼 것이다
하지만 우리가 보기 좋게 100이라는 변수명으로 설정이 되어 있는 것이고 하지만
이 100이라는 변수의 안에 들어있는 값이 바뀌면 안되기 때문에 100은 리터럴 상수라고 한다.
( 매번 사람이 컴퓨터와 소통하기 위해 2진법으로 바꾸어서 표기하지 않아도 된다)


기본적으로 리터럴 상수는
정수 = int, 실수 = double

그렇기 때문에 정수형 중에 Long자료형을 쓸 때는 
뒤에 L을 붙여준다.
int 같은경우 21억이라는 단위를 넘어가면 쓸 수없기에 Long을 이용할 때 쓴다.

실수 같은 경우에는 float 은 F를 뒤에 붙여준다.

형 변환

업캐스팅
문자 -> 정수 -> 실수
(값이 작은 범위에서 큰 범위로의 형 변환)
묵시적 형 변환 (형 변환 타입 생략 가능) kotlin에선 불가능!

다운캐스팅(명시적 형 변환)


연산자

항과 연산자

항은 값
연산자는 어떤 방법으로 계산을 할 것인지 결정하는 기호

연산자의 종류

단항 연산자 : 항이 하나 인것
대입 연산자 (=) : 변수에 값을 대입하는 연산자 
부호 연산자 (+, -): 양수, 음수
산술 연산자 (+,-,*,/,%) 
복합 대입 연산자 (+=, -=, *=, /=, %=)
증감 연산자 (++, --)

++: 항의 값에 1을 더한다.
--: 항의 값에 1을 뺀다.

이항 연산자 : 항이 두 개인 연산자

관계 연산자
>, <, >=, <=, ==, =!

논리 연산자

삼항 연산자 : 항이 세 개인 연산자

조건 연산자 : 조건식 ? 결과1 : 결과2

조건식이 참이면 결과1 거짓이면 결과2를 반환한다.
결과의 자료형은 같아야한다.

※ 연산을 하게 되면 항상 결과가 나온다.


문자열 : 여러 문자를 하나로 묶은 것

String Class 문자열은 기본 자료형에 속하지 않는다.

참조 자료형



표준 입력

Scanner Class
Scanner의 메서드()

next() 와 nextLine()

java.lang에 들어있는 것들은 import가 필요하지 않다.

하지만 Scanner는 util에 있기에 import를 해주어야하고

일괄적으로 import하는
이클립스 단축키는 ctrl + shift + o 이다.

단! 그 클래스를 쓰겠다고 명확하게 변수를 지정해주어야 쓸 수 있다.



























