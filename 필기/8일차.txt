상속 extends ( 상속은 단일의 선상으로 상속만 가능하다 )

확장의 의미

메모리 공간을 확장한다.

자식 클래스에 상속받을 부모 클래스를 붙이겠다

public class 자식클래스 extends 부모클래스 {}

자식클래스에서 부모클래스를 상속받게되면

메인에서 자식클래스를 생성 할 당시에
부모클래스가 먼저 생성이 되고 자식 클래스가 생성된다.

생성자의 super(); 호출이 항상 먼저 선언 되는 것은 상속의 부모클래스가 먼저 
생성된다는 의미이다. 그렇기 때문에 super()의 호출은 생성자의 가장 상단에서 일어나야한다.

instanceof 와 Class.class 차이  Class.class 는 명확하게 생성이 되었는지 확인하고 비교할 때 쓴다  
객체 비교는 Class.class로 한다. instanceof는 모호하다.(사라진 언어)


a -> b - > c 가 상속 관계 일때 

a = c; 를 했을 때 업캐스팅된다.

a instanceof c = true

a instanceof b = true

==========================
a.getClass() <- c의 인스턴스를 담고 있다. 이 경우 a.getClass() == c.Class ;



추상 클래스
어떠한 기능들이 모여 있는 설계도 라고 생각한다 
직접 구현은 하지않는 클래스
(메소드 구현부가 사라진 메소드들)추상 메소드

추상 메소드가 하나라도 있다면 추상클래스로 명명해야하며

추상 클래스는 생성자체를 할 수가 없다.

구현 할 수 있는 틀자체가 없다
설계도 일뿐 종이쪼가리

추상 클래스는 일반클래스가 가질 수 있는 것은 다 가질 수 있다.
생성자, 메소드, 멤버변수등 

클래스가 추상클래스를 상속하게 된다면 추상클래스 안에 있는 추상메소드는 모두 오버라이드 해야된다.
혹은 그 상속받은 클래스를 추상클래스로 명명해야한다.


인터페이스 (도구)
인터페이스는 도구의 개념이기에 여러개를 중복해서 가져올 수 있다.

어떠한 객체를 만들 때의 부속품이 되는 것은 인터페이스로 설계한다.

리모컨이 있을 때 버튼이라던지 안에 들어가는 배터리라던지 이런 관계이다.

// 인터페이스의 안의 메소드는 무조건 추상메소드이다. 그래서  abstract 예약어가 붙지않는다.
// 추상 클래스와 달리 생성자나 구현객체 자체를 쓸 수 없다.
// 일반 변수를 가질 수 없다. 상수는 가질 수 있다. 

인터페이스는 final 과 absctract를 생략할 수 있다.


