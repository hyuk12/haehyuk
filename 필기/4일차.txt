메소드

하나의 일정한 행동들을 정리해서 모아 놓은 것이 메서드(함수)이다
똑같은 메소드 명을 일반적으로 사용하지 못한다.

하지만 매개변수의 형태가 다르면 똑같은 이름을 쓸 수가 있다.
호출하는 시점에서 매개변수가 다른 것에 따라 구분이 가능하기 때문이다.
반환형이랑은 관계가 없다. 호출하는 시점의 매개변수에 따라 구분이 가능한 것이기 때문. (메소드 오버로딩)

public static 반환형 메소드명 (매개변수) {
	실행문;
}

반환형이 있을수도 없을수도 있다. 매개변수는 있을수도 없을 수도 있다.
반환형이 있을 경우 return 값이 존재한다.

반환은 하나만 가능하다.
매개변수는 여러가지 사용이 가능하다.

각각의 메소드는 다른 지역이기 때문에 같은 변수명을 사용가능하다.

함수를 부를 때와 메소드로 부를 때 <  (일단 메모리에 저장되는 위치가 다르다)
자바에서는 모든 함수는 클래스안에서 정의 되기에 일반 함수는 존재 하지 않는다.
메소드는 클래스안에 정의 된 함수를 메소드라고 부른다.

(호이스팅)
클래스는 항상 컴파일 과정에서

정의되어 있는 녀석들을 먼저 정의 한 후에
메인을 실행 시키기 때문에 메서드가 메인함수 위나 밑이나 어디에 있든 쓸 수 있다.

c언어는

함수의 정의부분이 앞부분에 따로 있다.


객체 지향 언어(OOP)
: 순차 지향 언어에 오브젝트개념이 추가된 것

객체란 세상에 존재하는 모든 것을 의미한다.

프로그래밍 관점에서는 객체들의 관계성을 사용하여 순차적으로 수행되는
프로그램 내에서 객체들 간에 관계를 형성하여 프로그램을 동작하게함.

객체 = 데이터 + 기능

ex) 객체 = 자동차
데이터(변수) = 색상, 모델명, 제조사명
기능(메소드) = 엔진가동, 에어컨실행, 브레이크패들작동


객체지향 언어특징
1. 상속 : 부모와 자식 관계 (데이터의 관계성), 상위 클래스에서 모든 것을 상속받아서 사용하는 것
2. 캡슐화: 데이터와 기능을 보호 한다 , 외부로부터 접근은 차단,
 		권한 또는 절차 없이 데이터를 변경 또는 기능수행을 할 수 없게 한다.(데이터의 은닉성)
3. 추상화: 추상적인 요소들을 묶어서 분류하는 것 (데이터의 구조화) 공통된 것을 추출 하는 것을 의미한다.
여러 가지 사물이나 개념에서 공통되는 특성이나 속성 따위를 추출하여 파악하는 작용

4. 다형성: 객체의 기능이 다양한 형태를 가질 수 있음 (상속과 깊은 관계를 가진다.)
부모클래스로 부터 상속받은 데이터와 기능을 자식 클래스에서 재정의하여 사용할 수 있음 ( 메소드 오버로드, 오버라이드, 형변환 등)

객체지향 언어 장점
(절차지향의 상대적으로)
1.  재사용성 : 상속을 통해서 코드의 재사용을 높일수 있다.

2. 생산성 향상: 클래스 단위의 부품들을 조립

3. 유지보수의 우수성: 구조화 된 소스코드 클래스 단위로 소스 코드를 관리할 수 있다.

단점 

1. 객체를 세분화하여 설계하여야 한다.
2. 실행 속도가 절차지향 언어 대비 느리다.
3. 상속으로 인하여 관계가 많이 형성되면 코딩의 난이도가 높아진다.
 
클래스(참조 자료형) : 객체에 대하여 정의해 놓은 설계도 혹은 틀

Object 객체 : 클래스를 통해 구현 할 수 있는 모든 대상 / 즉, 해당 클래스로 구현한 인스턴스를 대표하는 의미
( 메모리 할당이 되지 않은 상태)

객체가 실제로 구현된 것 존재하는 것 : instance 인스턴스 생성(실제로 메모리 공간을 할당 받은 상태)




null 값 메모리의 최상단 0인 값 비워져 있다.

J09_Student student1 = new J09_Student();

자료형 		변수명		값 (생성자)	 	자료형인 클래스가 컴파일 시점에 스택(정적) 영역에 
										공간을 할당 받는데 null 값이 기본적으로
										들어가 있고, 그 곳에 new라는 것이 실행이 되면
										동적 메모리(힙 영역) 할당을 한다. 이 빌리는 행위가 생성이다.
										그리고 동적메모리할당된 주소는 매번 빌릴 때마다 바뀌기 때문에
										그 메모리의 주소를 스택에 담고 그 스택주소가 변수명에 담긴다.

클래스의 주소 할당  ->  할당 되어 있는 주소 값을 . 을타고 참조해서 들어가기 때문에 클래스를 참조 자료형이라고 한다.
 				



생성자는 클래스명과 일치한다 . (절대 변하지 않는다)
형태는 메소드 형태이다.

기본적으로 정의가 되어있어야 쓸 수 있지만, 생략되어있어 사용이 가능하다.



















